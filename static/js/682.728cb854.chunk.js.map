{"version":3,"file":"static/js/682.728cb854.chunk.js","mappings":"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","sources":["components/contactForm/ContactForm.jsx","components/filter/Filter.jsx","components/contactListItem/ContactListItem.jsx","components/contactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import React, { useState, forwardRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/operations/operations';\n\nimport Button from '@mui/material/Button';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport TextField from '@mui/material/TextField';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport { getTasks } from '../../redux/selectors/selectors';\n\nconst ContactForm = () => {\n  const [open, setOpen] = useState(false);\n\n  const contacts = useSelector(state => state.contacts.items);\n  const contactsData = useSelector(getTasks);\n  const dispatch = useDispatch();\n\n  const Alert = forwardRef(function Alert(props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n  });\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = e.target.elements;\n    const newContact = { name: name.value, number: number.value };\n\n    if (checkDuplicateContact(newContact)) {\n      alert(`${newContact.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    setOpen(true);\n    e.target.reset();\n  };\n\n  const checkDuplicateContact = newContact => {\n    return contacts.some(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Contacts</h2>\n      <TextField\n        id=\"name\"\n        label=\"Name\"\n        variant=\"outlined\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <TextField\n        id=\"number\"\n        label=\"Number\"\n        variant=\"outlined\"\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      {contactsData.operation === 'add' ? (\n        <Button type=\"submit\" variant=\"contained\">\n          <CircularProgress size={25} color=\"inherit\" />\n        </Button>\n      ) : (\n        <Button type=\"submit\" variant=\"contained\">\n          Add contact\n        </Button>\n      )}\n\n      <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\" sx={{ width: '100%' }}>\n          Contact added successfully!\n        </Alert>\n      </Snackbar>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from '../../redux/Slices/Slices';\nimport TextField from '@mui/material/TextField';\n\nconst Filter = () => {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <TextField\n      id=\"outlined-basic\"\n      label=\"find contacts by name\"\n      variant=\"outlined\"\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={e => dispatch(filterContacts(e.target.value))}\n      size=\"small\"\n    />\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Divider from '@mui/material/Divider';\n\nconst ContactsListItem = ({ id, name, number, children }) => {\n  return (\n    <>\n      <li key={id}>\n        {name}: {number} {children}\n      </li>\n      <Divider />\n    </>\n  );\n};\n\nContactsListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default ContactsListItem;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/operations/operations';\nimport ContactsListItem from '../contactListItem/ContactListItem';\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\n\nconst ContactsList = () => {\n  const [open, setOpen] = useState(false);\n  const [loadingContacts, setLoadingContacts] = useState([]);\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const handleClick = id => {\n    setLoadingContacts(prevState => [...prevState, id]);\n    dispatch(deleteContact(id));\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <ul>\n        {filteredContacts.map(contact => (\n          <ContactsListItem\n            key={contact.id}\n            id={contact.id}\n            name={contact.name}\n            number={contact.number}\n          >\n            <Button\n              variant=\"outlined\"\n              color=\"error\"\n              size=\"small\"\n              startIcon={<DeleteIcon />}\n              onClick={() => handleClick(contact.id)}\n            >\n              {loadingContacts.includes(contact.id) ? (\n                <CircularProgress size={15} color=\"inherit\" />\n              ) : (\n                'delete'\n              )}\n            </Button>\n          </ContactsListItem>\n        ))}\n      </ul>\n      <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\n        <MuiAlert\n          onClose={handleClose}\n          severity=\"success\"\n          sx={{ width: '100%' }}\n        >\n          Contact deleted successfully!\n        </MuiAlert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default ContactsList;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../../redux/operations/operations';\nimport ContactForm from '../../components/contactForm/ContactForm';\nimport Filter from '../../components/filter/Filter';\nimport ContactsList from '../../components/contactList/ContactList';\nimport { Box, Slide, Grid } from '@mui/material';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { getTasks } from '../../redux/selectors/selectors';\n\nconst Contacts = () => {\n  const contactsData = useSelector(getTasks);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box textAlign=\"left\">\n      <h1>Phonebook</h1>\n      <Grid container spacing={15}>\n        <Grid item xs={6}>\n          <Slide direction=\"down\" in={true} mountOnEnter unmountOnExit>\n            <div>\n              <ContactForm />\n            </div>\n          </Slide>\n        </Grid>\n        <Grid item xs={6}>\n          <Box\n            sx={{\n              padding: '20px',\n              width: '100%',\n              height: '257px',\n              overflowY: 'auto',\n              maxWidth: '350px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              boxShadow: '0 2px 4px rgba(0, 0, 0, .3)',\n              '&::-webkit-scrollbar': {\n                width: '8px',\n              },\n              '&::-webkit-scrollbar-thumb': {\n                backgroundColor: '#ccc',\n                borderRadius: '4px',\n              },\n              '&::-webkit-scrollbar-thumb:hover': {\n                backgroundColor: '#999',\n              },\n            }}\n          >\n            <Slide direction=\"down\" in={true} mountOnEnter unmountOnExit>\n              <div>\n                {contactsData.operation === 'fatch' ? (\n                  <div>\n                    <CircularProgress size={25} color=\"inherit\" />\n                  </div>\n                ) : (\n                  <>\n                    <Filter />\n                    <ContactsList />\n                  </>\n                )}\n              </div>\n            </Slide>\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["useState","open","setOpen","contacts","useSelector","state","items","contactsData","getTasks","dispatch","useDispatch","Alert","forwardRef","props","ref","elevation","variant","handleClose","event","reason","checkDuplicateContact","newContact","some","contact","name","toLowerCase","onSubmit","e","preventDefault","target","elements","number","value","alert","addContact","reset","TextField","id","label","type","pattern","title","required","operation","Button","CircularProgress","size","color","Snackbar","autoHideDuration","onClose","severity","sx","width","filter","onChange","filterContacts","children","Divider","loadingContacts","setLoadingContacts","filteredContacts","includes","map","startIcon","Delete","onClick","prevState","deleteContact","useEffect","fetchContacts","Box","textAlign","Grid","container","spacing","item","xs","Slide","direction","in","mountOnEnter","unmountOnExit","padding","height","overflowY","maxWidth","border","borderRadius","boxShadow","backgroundColor"],"sourceRoot":""}